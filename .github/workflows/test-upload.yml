name: Test TestFlight Upload

on:
  workflow_dispatch:  # Manual trigger only

jobs:
  test-upload:
    runs-on: macos-14
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build web app
        run: |
          npm run generate
          npx cap sync ios
      
      - name: Setup certificates
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # Import certificate and provisioning profile
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # Apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          UUID=$(security cms -D -i $PP_PATH | grep -A1 'UUID' | grep '<string>' | sed 's/.*<string>\(.*\)<\/string>.*/\1/')
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
      
      - name: Build iOS app
        run: |
          cd ios/App
          
          # Clean and build
          rm -rf ~/Library/Developer/Xcode/DerivedData
          xcodebuild clean -workspace App.xcworkspace -scheme App
          
          # Build archive without code signing
          xcodebuild archive \
            -workspace App.xcworkspace \
            -scheme App \
            -configuration Release \
            -archivePath $RUNNER_TEMP/Audiobookscasa.xcarchive \
            -destination 'generic/platform=iOS' \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO
          
          # Export IPA with signing
          xcodebuild -exportArchive \
            -archivePath $RUNNER_TEMP/Audiobookscasa.xcarchive \
            -exportPath $RUNNER_TEMP/export \
            -exportOptionsPlist ExportOptions.plist
      
      - name: Upload to TestFlight (Method 1 - altool)
        id: upload_altool
        continue-on-error: true
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
        run: |
          echo "=== Method 1: Using altool ==="
          
          # Create API key file
          mkdir -p ~/.appstoreconnect/private_keys
          echo -n "$APP_STORE_CONNECT_API_KEY_CONTENT" | base64 --decode > ~/.appstoreconnect/private_keys/AuthKey_${APP_STORE_CONNECT_API_KEY_ID}.p8
          
          # Find IPA
          IPA_PATH=$(find $RUNNER_TEMP/export -name "*.ipa" | head -1)
          echo "IPA Path: $IPA_PATH"
          
          # Try upload with altool
          xcrun altool --upload-app \
            --type ios \
            --file "$IPA_PATH" \
            --apiKey "$APP_STORE_CONNECT_API_KEY_ID" \
            --apiIssuer "$APP_STORE_CONNECT_API_ISSUER_ID" \
            --verbose
      
      - name: Upload to TestFlight (Method 2 - API Key JSON)
        if: steps.upload_altool.outcome == 'failure'
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
        run: |
          echo "=== Method 2: Using API Key JSON ==="
          
          # Create API key JSON
          cat > ~/private_keys_AuthKey.json <<EOF
          {
            "key_id": "$APP_STORE_CONNECT_API_KEY_ID",
            "issuer_id": "$APP_STORE_CONNECT_API_ISSUER_ID",
            "key": "$APP_STORE_CONNECT_API_KEY_CONTENT"
          }
          EOF
          
          # Find IPA
          IPA_PATH=$(find $RUNNER_TEMP/export -name "*.ipa" | head -1)
          
          # Upload with JSON config
          xcrun altool --upload-app \
            --type ios \
            --file "$IPA_PATH" \
            --apiKey "$APP_STORE_CONNECT_API_KEY_ID" \
            --apiIssuer "$APP_STORE_CONNECT_API_ISSUER_ID"
      
      - name: Upload to TestFlight (Method 3 - Direct xcrun)
        if: failure()
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
          APP_APPLE_ID: ${{ secrets.APP_APPLE_ID }}
        run: |
          echo "=== Method 3: Using xcrun with app-specific password ==="
          
          # Find IPA
          IPA_PATH=$(find $RUNNER_TEMP/export -name "*.ipa" | head -1)
          
          # Create API key file in current directory
          echo -n "$APP_STORE_CONNECT_API_KEY_CONTENT" | base64 --decode > AuthKey.p8
          
          # Try with explicit key path
          xcrun altool --upload-app \
            --type ios \
            --file "$IPA_PATH" \
            --apiKey "$APP_STORE_CONNECT_API_KEY_ID" \
            --apiIssuer "$APP_STORE_CONNECT_API_ISSUER_ID" \
            --privateKey @file:AuthKey.p8
      
      - name: Clean up
        if: always()
        run: |
          if [ -f "$RUNNER_TEMP/app-signing.keychain-db" ]; then
            security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          fi