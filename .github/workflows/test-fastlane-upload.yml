name: Test Fastlane Upload

on:
  workflow_dispatch:

jobs:
  build-and-upload:
    runs-on: macos-14
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build web app
        run: |
          npm run generate
          npx cap sync ios
      
      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true
          working-directory: ios/App
      
      - name: Install Fastlane
        run: |
          cd ios/App
          gem install fastlane
      
      - name: Setup certificates
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # Import certificate and provisioning profile
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # Apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles/
      
      - name: Build IPA with Fastlane
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
          FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT: 120
        run: |
          cd ios/App
          
          # Create Fastfile if it doesn't exist
          mkdir -p fastlane
          cat > fastlane/Fastfile <<'FASTFILE'
          default_platform(:ios)
          
          platform :ios do
            desc "Build and upload to TestFlight"
            lane :beta do
              # Setup App Store Connect API
              api_key = app_store_connect_api_key(
                key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
                issuer_id: ENV["APP_STORE_CONNECT_API_ISSUER_ID"],
                key_content: ENV["APP_STORE_CONNECT_API_KEY_CONTENT"],
                is_key_content_base64: true
              )
              
              # Build the app
              build_app(
                workspace: "App.xcworkspace",
                scheme: "App",
                export_method: "app-store",
                export_options: {
                  provisioningProfiles: {
                    "com.audiobookscasa.app" => "Audiobookscasa App Store"
                  },
                  signingStyle: "manual",
                  teamID: "4PA2S8A753"
                },
                skip_codesigning: true,
                export_xcargs: "-allowProvisioningUpdates",
                output_directory: "./build",
                output_name: "Audiobookshelf.ipa"
              )
              
              # Upload to TestFlight
              upload_to_testflight(
                api_key: api_key,
                skip_waiting_for_build_processing: true,
                skip_submission: true
              )
            end
          end
          FASTFILE
          
          # Run Fastlane
          fastlane beta